
Если уровень пройден, то вернется структура
{
	"status":      "200. StatusOK", // Отобразить в терминале
	"isCompleted": true, // Если уровень пройден, то переключаем пользователя на следующий
}

Иначе
{
	"status":      "404. BadRequest", // Отобразить в терминале
	"response":    "Какой то ответ от сервера: например "Failed to reach stack overflow" ", // Отобразить в терминале (UI, на сайте!)
	"isCompleted": false,
}

Задача 0: Начало.

Вы — хакер-новичок, нанятый таинственным заказчиком.
Ваша цель — как можно сильнее навредить компании-конкуренту. 
Сначала вы должны пробраться в систему через уязвимые веб-интерфейсы, a
затем подорвать устойчивость серверного ПО через самописные программы на питоне.
Каждое успешно выполненное задание приближает вас к настоящему хаусу.

Ввод: пустой
------------------------
Задача 1: Кто они такие?

Мы знаем, что наш конкурент хостит свой сервис на сайте с доменом /hosting.
Давай узнаем об этой компании больше, "дернув" эндпоинт /about с помощью curl'a.

Ввод: curl -X GET localhost:9086/about
------------------------
Задача 2: У них не защищен сервер.

Удивительно, но они забыли использовать простейшие схемы защиты. Мы узнали следущие об их системе:
admin@yandex.ru -> почта администратора их внутренней дашборды
localhost:9086/db/about -> эндпоинт для получения информации об схеме базы данных 
localhost:9086/files -> эндпоинт для получения файлов на системе
localhost:9086/login -> эндпоинт для авторизации
Давай попробуем узнать их БД, наверное стоит заходить под админом:

Ввод: curl -X GET localhost:9086/db/about?user=admin
------------------------
Задача 3: Брутфорс.

Хм, похоже нужно обладать правами суперпользователя для просмотра БД. Давай попробуем тогда
залогиниться под админом, но нужен пароль. Раз у них не настроена защита, то и пароль должен быть простым,
например 5-ти значный.

Ввод: curl -X POST localhost:9086/login?user=admin&password=12345 (любые числа)
------------------------
Задача 4: Файловая система.

А что если посмотреть их файлвы на системе. Давай сделаем это, отправив query запрос с командой просмотра файлов в UNIX системах.

Ввод: curl -X POST localhost:9086/files?query="ls"
------------------------
Задача 5: Дырявая система. 

Сработало. Мы получили следующие файлы:
main.go
db.go
db.sql
Давай посмотрим схему БД, просто "катнув" ее.

Ввод: curl -X POST localhost:9086/files?query="cat db.sql"
------------------------
Задача 6: Азы SQL.

Что ж, мы получили следущую информацию:
- У конкурентов есть таблицы users
Давай попробуем узнать пароль рут пользователя, использовав SQL инъекцию.
Мы узнали из файла db.go, что там используется такой код:
username = input("Username: ")
query = f"SELECT * FROM users WHERE username = '{username}'"

Ввод: ' OR 'a' = 'a
------------------------
Задача 7: В поисках пароля.


